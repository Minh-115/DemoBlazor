<h3>ProductList</h3>

@page "/products"
@using BlazorApp.Data
@using BlazorApp.Models
@using BlazorApp.Repositories.ProductRepository
@using Dapper
@using Microsoft.EntityFrameworkCore
@using BlazorApp.StoredProcedureHepler
@inject AppDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IProductRepository ProductRepository
@inject IStoredProcedureHelper _spHelper
@using MudBlazor

@inject ISnackbar Snackbar

<h3>Products</h3>

@* <input placeholder="keyword" @bind="searchKeyword" />
<button @onclick="Search">Search</button>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>@product.Quantity</td>
                <td>
                    <button @onclick="() => EditProduct(product.Id)">Edit</button>
                    <button @onclick="() => ConfirmDelete(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table> *@
<MudText Typo="Typo.h3">Product List</MudText>

<MudTextField @bind-Value="searchKeyword" Placeholder="Search keyword" Variant="Variant.Outlined" Adornment="Adornment.Start" />
<MudButton OnClick="Search" Variant="Variant.Filled" Color="Color.Primary">
	Search
</MudButton>
<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton>

<MudTable Items="products" Dense="true" Hover="true">
	<HeaderContent>
		<MudTh>Id</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Price</MudTh>
		<MudTh>Quantity</MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Id">@context.Id</MudTd>
		<MudTd DataLabel="Name">@context.Name</MudTd>
		<MudTd DataLabel="Price">@context.Price</MudTd>
		<MudTd DataLabel="Quantity">@context.Quantity</MudTd>
		<MudTd>
			<MudButton OnClick="() => EditProduct(context.Id)" Color="Color.Info">Edit</MudButton>
			<MudButton OnClick="() => ConfirmDelete(context.Id)" Color="Color.Error">Delete</MudButton>
		</MudTd>
	</RowTemplate>
</MudTable>

<MudPagination Color="Color.Primary" Align="Align.Center" Count="totalPages" SelectedChanged="OnPageIndexChanged" />

<MudText Align="Align.Center">Selected page: @pageIndex</MudText>


<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowSnackBar">
	Open Snackbar
</MudButton>
<button @onclick="AddProduct">Create New Product</button>
<button @* @onclick="AddProduct" *@ onclick="ClickMe(this)">Create New Product</button>
<button @onclick="CallJsFunction">Click Me</button>
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete this product? @productIdToDelete
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" @onclick="() => DeleteProduct()">Delete</button>
			</div>
		</div>
	</div>
</div>

@code {
	private string searchKeyword = string.Empty;	
	private List<Product> products = new List<Product>();
	private int productIdToDelete;
	private int pageIndex = 1;
	private int pageSize = 5;
	private int totalRows = 1;
	private int totalPages = 1;
	protected override async Task OnInitializedAsync()
	{
		//products = (await ProductRepository.GetAllAsync()).ToList();
		Search();
	}
	protected override void OnParametersSet()
	{
		Console.WriteLine("reload");
	}
	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {		
	// 		 Search();		
	// }
	private void OnPageIndexChanged(int newPageIndex)
	{
		pageIndex = newPageIndex;  // Cập nhật lại pageIndex nếu cần
		Search();
	}
	private void AddProduct()
	{
		// Đưa đến màn thêm mới
		Navigation.NavigateTo($"/products/edit/{0}");
	}

	private void EditProduct(int id)
	{
		Navigation.NavigateTo($"/products/edit/{id}");
	}
	private async Task DeleteProduct()
	{
		await ProductRepository.DeleteAsync(productIdToDelete);
		//products = (await ProductRepository.GetAllAsync()).ToList();
		var entity = await ProductRepository.GetByIdAsync(productIdToDelete);		
		products = products.Where(x => x.Id != productIdToDelete).ToList();
		await JSRuntime.InvokeVoidAsync("hideModalConfirmDelete");
	}
	private async Task CallJsFunction()
	{
		await JSRuntime.InvokeVoidAsync("showMessage", "truyền biến 1!", "biến 2");
	}
	private void ConfirmDelete(int id)
	{
		productIdToDelete = id;
		// Hiển thị modal xác nhận (sử dụng Bootstrap JS)
		JSRuntime.InvokeVoidAsync("showModalConfirmDelete");
	}
	private void Search()
	{
		// Gọi stored procedure để tìm kiếm sản phẩm theo từ khóa
		var query = "GetAllProducts";
		var parameters = new DynamicParameters();
		parameters.Add("@keyword", searchKeyword);
		parameters.Add("@pageIndex", pageIndex);
		parameters.Add("@pageSize", pageSize);
		products = _spHelper.ExecuteQuery<Product>(query, parameters);
		if(products.Any()){
			totalRows = products.FirstOrDefault().totalRows;			
			totalPages = (totalRows + pageSize - 1) / pageSize;
		}
		else
		{
			totalRows = 0;
			totalPages = 0;
		}
	}
	private void ShowSnackBar()
	{
		Snackbar.Add
	(
	@<div>
		<h3>Hi from a RenderFragment</h3>
		<ul>
			<li>Here's a regular item</li>
			<li>Here's a <strong>bold item</strong></li>
			<li>Here's an <em>italicized item</em></li>
		</ul>
	</div>
		);
	}

}

<script>
	var x = 1;
		function ClickMe(button) {
		button.setAttribute('data-num',x++);

		console.log("Button clicked with data-num:", parseInt(x));
	}
	function showMessage(message,msg2) {
		// alert(message);
		// alert(msg2);
		$('.table').html("thay đổi thông tin bảng");
	}
	function showModalConfirmDelete(){
		$('#deleteModal').modal("show");
	}
		function hideModalConfirmDelete() {
		$('#deleteModal').modal("hide");
	}
</script>